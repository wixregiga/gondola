#: _test_data/test.go:45
msgid "Bye wor\"ld"
msgstr ""

#. This constant string is created by concatenating two strings.
#: _test_data/test.go:21
msgid "Concatenated constant string"
msgstr ""

#. This whole comment is part of the translation
#. comment.
#. And it keeps newlines, but strips leading whitespace.
#: _test_data/test.go:52
msgid "Hello again world"
msgstr ""

#. Using i18n.Sprintfn. The format string is fixed by i18n.Sprintfn
#. so it doesn't show any extra arguments.
#: _test_data/test.go:57
msgid "Hello one world"
msgid_plural "Hello %d worlds"
msgstr[0] ""
msgstr[1] ""

#. Please, translate this.
#. This comment is still part of the translation comment.
#: _test_data/test.go:34
msgid "Hello world\n"
msgstr ""

#. This translation has a context
#: _test_data/test.go:37
msgctxt "second"
msgid "Hello world\n"
msgstr ""

#. This is a long translation, to test line splitting in quoted strings.
#: _test_data/test.go:40
msgid ""
"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In sed ante ut massa "
"ultrices auctor. Vivamus rutrum ut ante et aliquet. Proin ut rutrum enim, a "
"elementum ligula. Morbi malesuada."
msgstr ""

#. This is a constant translatable string
#: _test_data/test.go:19
msgid "Testing constant string"
msgstr ""

#: _test_data/test.go:67
msgid "Testing even more translations"
msgstr ""

#. This is a very long comment to test the 80 columns per line splitting used 
#. automatically by gondola/i18n. Isn't it cool?
#: _test_data/test.go:63
msgid "Testing more translations"
msgstr ""

#. This is a var string declared via cast
#: _test_data/test.go:28
msgid "Testing var casted string"
msgstr ""

#. (_test_data/test.go:25) This is a var string declared via type
#. (_test_data/test.go:70) This is a var string declared via cast
#: _test_data/test.go:25 _test_data/test.go:70
msgid "Testing var string"
msgstr ""

#: _test_data/test.go:68
msgid "Var inside function"
msgstr ""
